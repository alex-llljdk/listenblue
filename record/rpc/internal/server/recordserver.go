// Code generated by goctl. DO NOT EDIT.
// Source: record.proto

package server

import (
	"context"

	"zjhx.com/record/rpc/internal/logic"
	"zjhx.com/record/rpc/internal/svc"
	"zjhx.com/record/rpc/record"
)

type RecordServer struct {
	svcCtx *svc.ServiceContext
	record.UnimplementedRecordServer
}

func NewRecordServer(svcCtx *svc.ServiceContext) *RecordServer {
	return &RecordServer{
		svcCtx: svcCtx,
	}
}

// 查询用户对应的记录和标题
func (s *RecordServer) GetIdAndTitles(ctx context.Context, in *record.RecordByUserIdReq) (*record.RecordByUserIdResp, error) {
	l := logic.NewGetIdAndTitlesLogic(ctx, s.svcCtx)
	return l.GetIdAndTitles(in)
}

// 查询最近记录
func (s *RecordServer) GetRecentIdAndTitles(ctx context.Context, in *record.RecordByUserIdReq) (*record.RecordByUserIdResp, error) {
	l := logic.NewGetRecentIdAndTitlesLogic(ctx, s.svcCtx)
	return l.GetRecentIdAndTitles(in)
}

// 查询某条详细的记录
func (s *RecordServer) GetDetailRecordById(ctx context.Context, in *record.DetailRecordReq) (*record.Records, error) {
	l := logic.NewGetDetailRecordByIdLogic(ctx, s.svcCtx)
	return l.GetDetailRecordById(in)
}

// 更新某条详细的记录
func (s *RecordServer) UpdateDetailRecordById(ctx context.Context, in *record.Records) (*record.BasicRespone, error) {
	l := logic.NewUpdateDetailRecordByIdLogic(ctx, s.svcCtx)
	return l.UpdateDetailRecordById(in)
}
