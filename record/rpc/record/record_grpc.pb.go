// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: record.proto

package record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Record_GetIdAndTitles_FullMethodName         = "/record.Record/GetIdAndTitles"
	Record_GetRecentIdAndTitles_FullMethodName   = "/record.Record/GetRecentIdAndTitles"
	Record_GetDetailRecordById_FullMethodName    = "/record.Record/GetDetailRecordById"
	Record_UpdateDetailRecordById_FullMethodName = "/record.Record/UpdateDetailRecordById"
)

// RecordClient is the client API for Record service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordClient interface {
	// 查询用户对应的记录和标题
	GetIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error)
	// 查询最近记录
	GetRecentIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error)
	// 查询某条详细的记录
	GetDetailRecordById(ctx context.Context, in *DetailRecordReq, opts ...grpc.CallOption) (*Records, error)
	// 更新某条详细的记录
	UpdateDetailRecordById(ctx context.Context, in *Records, opts ...grpc.CallOption) (*BasicRespone, error)
}

type recordClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordClient(cc grpc.ClientConnInterface) RecordClient {
	return &recordClient{cc}
}

func (c *recordClient) GetIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error) {
	out := new(RecordByUserIdResp)
	err := c.cc.Invoke(ctx, Record_GetIdAndTitles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecentIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error) {
	out := new(RecordByUserIdResp)
	err := c.cc.Invoke(ctx, Record_GetRecentIdAndTitles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetDetailRecordById(ctx context.Context, in *DetailRecordReq, opts ...grpc.CallOption) (*Records, error) {
	out := new(Records)
	err := c.cc.Invoke(ctx, Record_GetDetailRecordById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) UpdateDetailRecordById(ctx context.Context, in *Records, opts ...grpc.CallOption) (*BasicRespone, error) {
	out := new(BasicRespone)
	err := c.cc.Invoke(ctx, Record_UpdateDetailRecordById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServer is the server API for Record service.
// All implementations must embed UnimplementedRecordServer
// for forward compatibility
type RecordServer interface {
	// 查询用户对应的记录和标题
	GetIdAndTitles(context.Context, *RecordByUserIdReq) (*RecordByUserIdResp, error)
	// 查询最近记录
	GetRecentIdAndTitles(context.Context, *RecordByUserIdReq) (*RecordByUserIdResp, error)
	// 查询某条详细的记录
	GetDetailRecordById(context.Context, *DetailRecordReq) (*Records, error)
	// 更新某条详细的记录
	UpdateDetailRecordById(context.Context, *Records) (*BasicRespone, error)
	mustEmbedUnimplementedRecordServer()
}

// UnimplementedRecordServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServer struct {
}

func (UnimplementedRecordServer) GetIdAndTitles(context.Context, *RecordByUserIdReq) (*RecordByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdAndTitles not implemented")
}
func (UnimplementedRecordServer) GetRecentIdAndTitles(context.Context, *RecordByUserIdReq) (*RecordByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentIdAndTitles not implemented")
}
func (UnimplementedRecordServer) GetDetailRecordById(context.Context, *DetailRecordReq) (*Records, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailRecordById not implemented")
}
func (UnimplementedRecordServer) UpdateDetailRecordById(context.Context, *Records) (*BasicRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDetailRecordById not implemented")
}
func (UnimplementedRecordServer) mustEmbedUnimplementedRecordServer() {}

// UnsafeRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServer will
// result in compilation errors.
type UnsafeRecordServer interface {
	mustEmbedUnimplementedRecordServer()
}

func RegisterRecordServer(s grpc.ServiceRegistrar, srv RecordServer) {
	s.RegisterService(&Record_ServiceDesc, srv)
}

func _Record_GetIdAndTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetIdAndTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_GetIdAndTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetIdAndTitles(ctx, req.(*RecordByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecentIdAndTitles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecentIdAndTitles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_GetRecentIdAndTitles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecentIdAndTitles(ctx, req.(*RecordByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetDetailRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetDetailRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_GetDetailRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetDetailRecordById(ctx, req.(*DetailRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_UpdateDetailRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Records)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).UpdateDetailRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_UpdateDetailRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).UpdateDetailRecordById(ctx, req.(*Records))
	}
	return interceptor(ctx, in, info, handler)
}

// Record_ServiceDesc is the grpc.ServiceDesc for Record service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Record_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "record.Record",
	HandlerType: (*RecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIdAndTitles",
			Handler:    _Record_GetIdAndTitles_Handler,
		},
		{
			MethodName: "GetRecentIdAndTitles",
			Handler:    _Record_GetRecentIdAndTitles_Handler,
		},
		{
			MethodName: "GetDetailRecordById",
			Handler:    _Record_GetDetailRecordById_Handler,
		},
		{
			MethodName: "UpdateDetailRecordById",
			Handler:    _Record_UpdateDetailRecordById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
