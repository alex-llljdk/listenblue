// Code generated by goctl. DO NOT EDIT.
// Source: record.proto

package recordclient

import (
	"context"

	"zjhx.com/record/rpc/record"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BasicRespone       = record.BasicRespone
	DetailRecordReq    = record.DetailRecordReq
	DetailRecordResp   = record.DetailRecordResp
	IDandTitle         = record.IDandTitle
	RecordByUserIdReq  = record.RecordByUserIdReq
	RecordByUserIdResp = record.RecordByUserIdResp
	Records            = record.Records

	Record interface {
		// 查询用户对应的记录和标题
		GetIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error)
		// 查询最近记录
		GetRecentIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error)
		// 查询某条详细的记录
		GetDetailRecordById(ctx context.Context, in *DetailRecordReq, opts ...grpc.CallOption) (*Records, error)
		// 更新某条详细的记录
		UpdateDetailRecordById(ctx context.Context, in *Records, opts ...grpc.CallOption) (*BasicRespone, error)
	}

	defaultRecord struct {
		cli zrpc.Client
	}
)

func NewRecord(cli zrpc.Client) Record {
	return &defaultRecord{
		cli: cli,
	}
}

// 查询用户对应的记录和标题
func (m *defaultRecord) GetIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetIdAndTitles(ctx, in, opts...)
}

// 查询最近记录
func (m *defaultRecord) GetRecentIdAndTitles(ctx context.Context, in *RecordByUserIdReq, opts ...grpc.CallOption) (*RecordByUserIdResp, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetRecentIdAndTitles(ctx, in, opts...)
}

// 查询某条详细的记录
func (m *defaultRecord) GetDetailRecordById(ctx context.Context, in *DetailRecordReq, opts ...grpc.CallOption) (*Records, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.GetDetailRecordById(ctx, in, opts...)
}

// 更新某条详细的记录
func (m *defaultRecord) UpdateDetailRecordById(ctx context.Context, in *Records, opts ...grpc.CallOption) (*BasicRespone, error) {
	client := record.NewRecordClient(m.cli.Conn())
	return client.UpdateDetailRecordById(ctx, in, opts...)
}
