// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: live.proto

package live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Live_CreateRoom_FullMethodName   = "/live.Live/CreateRoom"
	Live_StartPublish_FullMethodName = "/live.Live/StartPublish"
	Live_ClosePublish_FullMethodName = "/live.Live/ClosePublish"
	Live_JoinRoom_FullMethodName     = "/live.Live/JoinRoom"
	Live_SaveToRecord_FullMethodName = "/live.Live/SaveToRecord"
	Live_SaveLive_FullMethodName     = "/live.Live/SaveLive"
	Live_GetLiveList_FullMethodName  = "/live.Live/GetLiveList"
)

// LiveClient is the client API for Live service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	StartPublish(ctx context.Context, in *StartPublishRequest, opts ...grpc.CallOption) (*StartPublishResponse, error)
	ClosePublish(ctx context.Context, in *ClosePublishRequest, opts ...grpc.CallOption) (*ClosePublishResponse, error)
	JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error)
	SaveToRecord(ctx context.Context, in *SaveRecordRequest, opts ...grpc.CallOption) (*SaveRecordResponse, error)
	SaveLive(ctx context.Context, in *SaveLiveRequest, opts ...grpc.CallOption) (*SaveLiveResponse, error)
	GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error)
}

type liveClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveClient(cc grpc.ClientConnInterface) LiveClient {
	return &liveClient{cc}
}

func (c *liveClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, Live_CreateRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) StartPublish(ctx context.Context, in *StartPublishRequest, opts ...grpc.CallOption) (*StartPublishResponse, error) {
	out := new(StartPublishResponse)
	err := c.cc.Invoke(ctx, Live_StartPublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) ClosePublish(ctx context.Context, in *ClosePublishRequest, opts ...grpc.CallOption) (*ClosePublishResponse, error) {
	out := new(ClosePublishResponse)
	err := c.cc.Invoke(ctx, Live_ClosePublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) JoinRoom(ctx context.Context, in *JoinRoomRequest, opts ...grpc.CallOption) (*JoinRoomResponse, error) {
	out := new(JoinRoomResponse)
	err := c.cc.Invoke(ctx, Live_JoinRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) SaveToRecord(ctx context.Context, in *SaveRecordRequest, opts ...grpc.CallOption) (*SaveRecordResponse, error) {
	out := new(SaveRecordResponse)
	err := c.cc.Invoke(ctx, Live_SaveToRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) SaveLive(ctx context.Context, in *SaveLiveRequest, opts ...grpc.CallOption) (*SaveLiveResponse, error) {
	out := new(SaveLiveResponse)
	err := c.cc.Invoke(ctx, Live_SaveLive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveClient) GetLiveList(ctx context.Context, in *GetLiveListRequest, opts ...grpc.CallOption) (*GetLiveListResponse, error) {
	out := new(GetLiveListResponse)
	err := c.cc.Invoke(ctx, Live_GetLiveList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveServer is the server API for Live service.
// All implementations must embed UnimplementedLiveServer
// for forward compatibility
type LiveServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	StartPublish(context.Context, *StartPublishRequest) (*StartPublishResponse, error)
	ClosePublish(context.Context, *ClosePublishRequest) (*ClosePublishResponse, error)
	JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error)
	SaveToRecord(context.Context, *SaveRecordRequest) (*SaveRecordResponse, error)
	SaveLive(context.Context, *SaveLiveRequest) (*SaveLiveResponse, error)
	GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error)
	mustEmbedUnimplementedLiveServer()
}

// UnimplementedLiveServer must be embedded to have forward compatible implementations.
type UnimplementedLiveServer struct {
}

func (UnimplementedLiveServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedLiveServer) StartPublish(context.Context, *StartPublishRequest) (*StartPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPublish not implemented")
}
func (UnimplementedLiveServer) ClosePublish(context.Context, *ClosePublishRequest) (*ClosePublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePublish not implemented")
}
func (UnimplementedLiveServer) JoinRoom(context.Context, *JoinRoomRequest) (*JoinRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLiveServer) SaveToRecord(context.Context, *SaveRecordRequest) (*SaveRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveToRecord not implemented")
}
func (UnimplementedLiveServer) SaveLive(context.Context, *SaveLiveRequest) (*SaveLiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLive not implemented")
}
func (UnimplementedLiveServer) GetLiveList(context.Context, *GetLiveListRequest) (*GetLiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveList not implemented")
}
func (UnimplementedLiveServer) mustEmbedUnimplementedLiveServer() {}

// UnsafeLiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveServer will
// result in compilation errors.
type UnsafeLiveServer interface {
	mustEmbedUnimplementedLiveServer()
}

func RegisterLiveServer(s grpc.ServiceRegistrar, srv LiveServer) {
	s.RegisterService(&Live_ServiceDesc, srv)
}

func _Live_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_StartPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).StartPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_StartPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).StartPublish(ctx, req.(*StartPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_ClosePublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).ClosePublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_ClosePublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).ClosePublish(ctx, req.(*ClosePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_JoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).JoinRoom(ctx, req.(*JoinRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_SaveToRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).SaveToRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_SaveToRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).SaveToRecord(ctx, req.(*SaveRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_SaveLive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).SaveLive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_SaveLive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).SaveLive(ctx, req.(*SaveLiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Live_GetLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveServer).GetLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Live_GetLiveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveServer).GetLiveList(ctx, req.(*GetLiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Live_ServiceDesc is the grpc.ServiceDesc for Live service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Live_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "live.Live",
	HandlerType: (*LiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Live_CreateRoom_Handler,
		},
		{
			MethodName: "StartPublish",
			Handler:    _Live_StartPublish_Handler,
		},
		{
			MethodName: "ClosePublish",
			Handler:    _Live_ClosePublish_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _Live_JoinRoom_Handler,
		},
		{
			MethodName: "SaveToRecord",
			Handler:    _Live_SaveToRecord_Handler,
		},
		{
			MethodName: "SaveLive",
			Handler:    _Live_SaveLive_Handler,
		},
		{
			MethodName: "GetLiveList",
			Handler:    _Live_GetLiveList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live.proto",
}
